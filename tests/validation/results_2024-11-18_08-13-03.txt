INFORMATION ON THE RUN

LLM ID: meta-llama/Meta-Llama-3.1-8B-Instruct
Max Generated Tokens LLM: 512
Interaction Modality: evaluation-simulation

-----------------------------------
Accuracy: 82.00%
-----------------------------------

Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 300 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce300pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5afterexecutingthefactoryfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, Station4, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,Station4,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":["Station2"],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 450 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce450products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 4700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor4700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 4700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor4700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 400 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing400pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"Predictthenextstationgiventhissequence:Station1"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 300 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce300products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 500 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce500units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 300 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce300pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 150 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce150pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 3700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin3700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 150 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce150products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 300 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing300pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 3700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin3700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 150 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce150piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, Station4, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,Station4,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, Station4, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,Station4,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 400 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce400units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 2700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin2700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 2200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor2200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":["Station2"],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory\\u2019sexecutionfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"BasedonthesequenceStation1,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 200 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce200pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 300 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing300pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 50 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate50products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 150 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce150pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 450 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing450pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station2 for creating 500 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":["Station2"],"query_nl":"WhatisthemeanwaitingtimeofStation2forcreating500products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 50 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce50piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 500 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce500piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 400 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing400pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 350 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce350units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 after executing the factory for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation3afterexecutingthefactoryfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 2700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor2700timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 200 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce200pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 50 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce50units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 300 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate300products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 200 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate200products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station5 to produce 250 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanprocessingtimeofStation5toproduce250pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3, Station4.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3,Station4."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1afterexecutingthefactoryfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 after executing the factory for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation3afterexecutingthefactoryfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 2200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor2200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3, Station4.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3,Station4."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 50 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce50pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 for creating 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5forcreating400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 4200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor4200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station1 to produce 100 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":["Station1"],"query_nl":"WhatisthemeanprocessingtimeofStation1toproduce100pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 2700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor2700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":["Station3"],"query_nl":"WhatisthemeanwaitingtimeofStation3afterexecutingthefactoryfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 200 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce200pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station5 to produce 50 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanprocessingtimeofStation5toproduce50pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor700timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 for creating 150 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5forcreating150products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 2200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor2200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 100 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing100pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 300 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce300piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station2 for creating 500 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":["Station2"],"query_nl":"WhatisthemeanwaitingtimeofStation2forcreating500products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 3200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor3200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 100 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce100products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 4200 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin4200unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 2200 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin2200unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 after executing the factory for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":["Station3"],"query_nl":"WhatisthemeanwaitingtimeofStation3afterexecutingthefactoryfor200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 100 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce100pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 1700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor1700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 2700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin2700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3, Station4?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3,Station4?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 2700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor2700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 1200 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin1200unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 50 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing50pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 400 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce400piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 250 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce250pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 450 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating450products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 100 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce100products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 100 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce100piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 250 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce250products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"BasedonthesequenceStation1,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 100 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate100products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 500 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce500pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 450 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce450piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 400 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce400piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 after the factory's execution for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4afterthefactory'sexecutionfor200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 350 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce350units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 450 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce450units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 150 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate150products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 50 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing50pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 500 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce500pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 2200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor2200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 100 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce100pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 500 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce500pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station1 after the factory's execution for 2700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanprocessingtimeofStation1afterthefactory'sexecutionfor2700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 100 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce100products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"Predictthenextstationgiventhissequence:Station1"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 250 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce250units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 for creating 150 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1forcreating150products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, Station4, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,Station4,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 100 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce100units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 for creating 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":["Station3"],"query_nl":"WhatisthemeanwaitingtimeofStation3forcreating400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 1700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor1700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":["Station2"],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 400 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce400pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 3200 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin3200unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 300 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce300products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 150 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce150piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station3 after the factory's execution for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":["Station3"],"query_nl":"WhatisthemeanprocessingtimeofStation3afterthefactory'sexecutionfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 200 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce200piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3, Station4?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3,Station4?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, Station3, Station4, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"BasedonthesequenceStation1,Station2,Station3,Station4,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station1 after the factory's execution for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanprocessingtimeofStation1afterthefactory'sexecutionfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station3 after the factory's execution for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":["Station3"],"query_nl":"WhatisthemeanprocessingtimeofStation3afterthefactory'sexecutionfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2, Station3.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2,Station3"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 150 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce150units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"Predictthenextstationgiventhissequence:Station1."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station1 after the factory's execution for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanprocessingtimeofStation1afterthefactory'sexecutionfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 100 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing100pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 150 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce150products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station2 for creating 200 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":["Station2"],"query_nl":"WhatisthemeanwaitingtimeofStation2forcreating200products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 250 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce250units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 150 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce150units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 after executing the factory for 2200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1afterexecutingthefactoryfor2200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 350 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce350pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1700timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station2 after executing the factory for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation2afterexecutingthefactoryfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 450 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce450pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station5 after the factory's execution for 2700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":["Station5"],"query_nl":"WhatisthemeanprocessingtimeofStation5afterthefactory'sexecutionfor2700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor1200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 for creating 500 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5forcreating500products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 250 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce250units?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 for creating 150 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1forcreating150products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 150 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing150pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 200 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating200products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 350 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce350pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"BasedonthesequenceStation1,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 2200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor2200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 100 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce100units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 for creating 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5forcreating250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 for creating 350 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1forcreating350products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 2700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor2700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 450 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing450pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"BasedonthesequenceStation1,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 2200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor2200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 2700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor2700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 200 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce200units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 after the factory's execution for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4afterthefactory'sexecutionfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 100 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate100products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":100,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 4200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor4200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 150 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate150products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":150,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station5 for creating 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":["Station5"],"query_nl":"WhatisthemeanwaitingtimeofStation5forcreating400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":["Station2"],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station3 after the factory's execution for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanprocessingtimeofStation3afterthefactory'sexecutionfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"BasedonthesequenceStation1,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Based on the sequence Station1, Station2, what is the most likely next station?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"BasedonthesequenceStation1,Station2,whatisthemostlikelynextstation?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station3 for creating 200 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":["Station3"],"query_nl":"WhatisthemeanwaitingtimeofStation3forcreating200products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1, Station2.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"Predictthenextstationgiventhissequence:Station1,Station2."}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3200timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 350 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce350units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 after executing the factory for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4afterexecutingthefactoryfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 300 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating300products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 350 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce350products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 250 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce250products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthenextproductionstationafterStation1?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 3200 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor3200unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 4700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor4700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":4700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 250 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate250products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 250 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce250pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Carry out a simulation for 1700 units of time to check how many pieces are produced.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"Carryoutasimulationfor1700unitsoftimetocheckhowmanypiecesareproduced."}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 400 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce400units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 350 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce350units?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 50 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce50piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 300 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate300products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 200 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce200units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"Predictthenextstationgiventhissequence:Station1"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 after executing the factory for 2200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1afterexecutingthefactoryfor2200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":2200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 50 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce50piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station2 after the factory's execution for 1700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[],"query_nl":"WhatisthemeanprocessingtimeofStation2afterthefactory'sexecutionfor1700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 200 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing200pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station4 to produce 300 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanprocessingtimeofStation4toproduce300pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 450 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing450pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 200 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce200products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Predict the next station given this sequence: Station1.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"],"query_nl":"Predictthenextstationgiventhissequence:Station1"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactoryfor3700timeunits"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 after executing the factory for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1afterexecutingthefactoryfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How many pieces can be produced in 2700 units of time?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[],"query_nl":"Howmanypiecescanbeproducedin2700unitsoftime?"}
Expected Answer: "task":"sim_with_time","simulation_time":2700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 400 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing400pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 350 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate350products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 200 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce200pieces"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":200,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Simulate the execution of the production process to produce 50 pieces.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[],"query_nl":"Simulatetheexecutionoftheproductionprocesstoproduce50pieces."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":50,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station2 after executing the factory for 1200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":["Station2"],"query_nl":"WhatisthemeanwaitingtimeofStation2afterexecutingthefactoryfor1200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":1200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time for producing 400 pieces?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeforproducing400pieces?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory for 3700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactoryfor3700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the next production station after Station1, Station2, Station3, Station4?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"],"query_nl":"WhatisthenextproductionstationafterStation1,Station2,Station3,Station4?"}
Expected Answer: "task":"event_prediction","simulation_time":"","target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4"]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Run a simulation to estimate the time required to produce 500 products.
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[],"query_nl":"Runasimulationtoestimatethetimerequiredtoproduce500products."}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":500,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station4 for creating 300 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":["Station4"],"query_nl":"WhatisthemeanwaitingtimeofStation4forcreating300products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":300,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time of Station1 for creating 350 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":["Station1"],"query_nl":"WhatisthemeanwaitingtimeofStation1forcreating350products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":350,"stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean waiting time after the factory's simulation for 700 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[],"query_nl":"Whatisthemeanwaitingtimeafterthefactory'ssimulationfor700timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":700,"target_pieces":"","stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time of Station5 after the factory's execution for 3200 time units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":["Station1","Station2","Station3","Station4","Station5"],"query_nl":"WhatisthemeanprocessingtimeofStation5afterthefactory'sexecutionfor3200timeunits?"}
Expected Answer: "task":"sim_with_time","simulation_time":3200,"target_pieces":"","stations_sequence":[]
Verification Result: False

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: Tell me the mean transfer time after executing the factory to produce 450 units?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[],"query_nl":"Tellmethemeantransfertimeafterexecutingthefactorytoproduce450units"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":450,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: How much time is needed to produce 250 pieces in the factory?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[],"query_nl":"Howmuchtimeisneededtoproduce250piecesinthefactory?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":250,"stations_sequence":[]
Verification Result: True

#####################################################################################
Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|> Act as a conversational interface towards the digital twin of the LEGO factory.
Use the following pieces of context to generate from the user question a JSON object containing one of the allowed 'task': 'sim_with_time' for the number of pieces produced in a certain time and related metrics (e.g. processing time), 'sim_with_number_products' to know how much units of time needed to produce a certain number of pieces and related metrics (e.g. processing time) and 'event_prediction' for predicting the next station.
If the user question does not match an allowed tasks kindly refuse to answer.
Examples:
1. Input (Natural Language Query): Carry out a simulation for 1000 units of time to check how many pieces are produced.
   Output (LLM answer): {"task": "sim_with_time", "simulation_time": 2000, "target_pieces": "", "stations_sequence": [], "query_nl": "Carry out a simulation for 1000 units of time to check how many pieces are produced."}
2. Input (Natural Language Query): Simulate the execution of the production process to produce 100 pieces.
   Output (LLM answer with Uppaal Query): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 100, "stations_sequence": [], "query_nl": "Simulate the execution of the production process."}
3. Input (Natural Language Query): What is the next production station after station 1 and station 2?
   Output (LLM answer): {"task": "event_prediction", "simulation_time": "", "target_pieces": "", "stations_sequence": ["Station1", "Station2"], "query_nl": "What is the next production station after station 1 and station 2?"
4. Input (Natural Language Query): What is the mean waiting time for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time for producing 200 products?"
5. Input (Natural Language Query): What is the mean waiting time of station 3 for producing 200 products?
   Output (LLM answer): {"task": "sim_with_number_products", "simulation_time": "", "target_pieces": 200, "stations_sequence": [], "query_nl": "What is the mean waiting time of station 3 for producing 200 products?"}}
<|eot_id|><|start_header_id|>user<|end_header_id|>
Here is the context: The allowed values for 'task' are: 'sim_with_time', 'sim_with_number_products', 'event_prediction'.
The labels for the stations are: Station1, Station2, Station3, Station4, Station5
Here is the user question: What is the mean processing time after executing the factory to generate 400 products?
<|eot_id|><|start_header_id|>assistant<|end_header_id|>
Model Answer: {"task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[],"query_nl":"Whatisthemeanprocessingtimeafterexecutingthefactorytogenerate400products?"}
Expected Answer: "task":"sim_with_number_products","simulation_time":"","target_pieces":400,"stations_sequence":[]
Verification Result: True

#####################################################################################
